name: CI

on:
  push:

env:
  CARGO_TERM_COLOR: always

jobs:
  rs-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Clone
      - uses: actions/cache@v3
        name: Cache Cargo Registry
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        name: Setup Rust
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        name: Cargo Build
        with:
          command: build
          args: --verbose --features std
      - uses: actions-rs/cargo@v1
        name: Cargo Test
        with:
          command: test
          args: --verbose --features std
  js-pretest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Clone
      - uses: actions/cache@v3
        name: Cache Cargo Registry
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        name: Setup Rust
        with:
          toolchain: nightly
          override: true
      - uses: jetli/wasm-pack-action@v0.3.0
        name: Install WasmPack
        with:
          version: 'latest'
      - name: Build Wasm
        run: |
          wasm-pack build --target nodejs -- --features wasm-pack --no-default-features
          rm pkg/{package.json,README.md,.gitignore}
      - uses: actions/upload-artifact@v2
        name: Upload Artifacts
        with:
          name: pretest
          path: pkg
  js-test:
    runs-on: ubuntu-latest
    needs:
      - rs-test
      - js-pretest
    strategy:
      matrix:
        node-version: [ v14.18.3, 14.x, 16.x, 18.x, "*" ]
    steps:
      - uses: actions/checkout@v2
        name: Clone
      - uses: actions/download-artifact@master
        with:
          name: pretest
          path: pkg
      - uses: actions/cache@v3
        name: Cache Cargo Registry
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/setup-node@v1
        name: Setup Node ${{ matrix.node-version }}
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Yarn
        if: matrix.node-version == 'v14.18.3'
        run: npm i -g corepack
      - name: Install Yarn
        if: matrix.node-version == '14.x' || matrix.node-version == '16.x' || matrix.node-version == '18.x' || matrix.node-version == '*'
        run: corepack enable
      - uses: actions/cache@v3
        name: Cache Yarn
        with:
          path: |
            .yarn/
            node_modules/
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install npm dependencies
        run: yarn install
      - name: Run Jest Tests
        run: yarn run test:wasm
  assemble:
    runs-on: ubuntu-latest
    needs:
      - js-test
    strategy:
      matrix:
        package-type: [ "nodejs", "bundler", "web", "web-parallel" ]
    steps:
      - uses: actions/checkout@v2
        name: Clone
      - uses: actions/cache@v3
        name: Cache Cargo Registry
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions/setup-node@v1
        name: Setup Node
        with:
          node-version: 18.x
      - name: Enable Yarn
        run: corepack enable
      - uses: actions/cache@v3
        name: Cache Yarn
        with:
          path: |
            .yarn/
            node_modules/
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - uses: actions-rs/toolchain@v1
        name: Setup Rust
        if: matrix.package-type != 'web-parallel'
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/toolchain@v1
        name: Setup Rust
        if: matrix.package-type == 'web-parallel'
        with:
          toolchain: nightly
          override: true
          components: rust-src
      - uses: jetli/wasm-pack-action@v0.3.0
        name: Install WasmPack
        with:
          version: 'latest'
      - name: Install npm dependencies
        run: yarn install
      - name: Build Wasm
        if: matrix.package-type != 'web-parallel'
        run: |
          wasm-pack build --target ${{ matrix.package-type }} -- --features wasm-pack --no-default-features
          rm pkg/{package.json,README.md,.gitignore}
      - name: Build Wasm
        if: matrix.package-type == 'web-parallel'
        run: |
          RUSTFLAGS='-C target-feature=+atomics,+bulk-memory,+mutable-globals' wasm-pack build --target web -- --features wasm-pack,safe,wasm-parallel --no-default-features -Z build-std=panic_abort,std
          rm pkg/{package.json,README.md,.gitignore}
      - name: Build Ts
        run: yarn run build:ts:${{ matrix.package-type }}
      - name: Assemble
        run: yarn run build:assemble:${{ matrix.package-type }}
      - uses: actions/upload-artifact@v2
        name: Upload Artifacts
        with:
          name: pkg-${{ matrix.package-type }}
          path: pkg.${{ matrix.package-type }}
  create-pkg:
    runs-on: ubuntu-latest
    needs:
      - assemble
    steps:
      - uses: actions/checkout@v2
        name: Clone
      - uses: actions/download-artifact@master
        with:
          name: pkg-nodejs
          path: pkg.nodejs
      - uses: actions/download-artifact@master
        with:
          name: pkg-bundler
          path: pkg.bundler
      - uses: actions/download-artifact@master
        with:
          name: pkg-web
          path: pkg.web
      - uses: actions/download-artifact@master
        with:
          name: pkg-web-parallel
          path: pkg.web-parallel
      - uses: actions/upload-artifact@v2
        name: Upload Artifacts
        with:
          name: pkg
          path: |
            pkg.bundler/
            pkg.nodejs/
            pkg.web/
            pkg.web-parallel/
            package.json
            index.browser.js
            LICENCE
            README.md
  js-test-integration:
    runs-on: ubuntu-latest
    needs:
      - create-pkg
    strategy:
      matrix:
        node-version: [ v14.18.3, 14.x, 16.x, 18.x, '*' ]
    steps:
      - uses: actions/checkout@v2
        name: Clone
      - uses: actions/download-artifact@master
        with:
          name: pkg
      - uses: actions/setup-node@v1
        name: Setup Node ${{ matrix.node-version }}
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Yarn
        if: matrix.node-version == 'v14.18.3'
        run: npm i -g corepack
      - name: Install Yarn
        if: matrix.node-version == '14.x' || matrix.node-version == '16.x' || matrix.node-version == '18.x' || matrix.node-version == '*'
        run: corepack enable
      - uses: actions/cache@v3
        name: Cache Yarn
        with:
          path: |
            .yarn/
            node_modules/
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
      - name: Install npm dependencies
        run: yarn install
      - name: Run Jest Tests
        run: yarn run test:integration
